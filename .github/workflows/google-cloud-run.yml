name: Deploy to Google Cloud Run
on:
  push:
    branches: [main]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION || 'us-central1' }}
  SERVICE_NAME: ${{ secrets.GCP_SERVICE_NAME || 'real-time-collaboration-workspace' }}
  GOOGLE_CLOUD_PROJECT: ${{ secrets.GCP_PROJECT_ID }}

jobs:
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2

      - name: Verify authentication
        run: |
          echo "🔐 Checking authentication..."
          gcloud auth list
          echo "📋 Current project: ${{ env.PROJECT_ID }}"

      - name: Configure Docker for GCP
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
          echo "🐳 Docker configured for Artifact Registry"
          
      - name: Verify Docker authentication
        run: |
          echo "🔐 Verifying Docker authentication..."
          gcloud auth list
          echo "🐳 Testing Docker access to Artifact Registry..."
          docker pull hello-world

      - name: Create Artifact Registry repository
        run: |
          echo "🏗️  Creating Artifact Registry repository..."
          gcloud artifacts repositories create ${{ env.SERVICE_NAME }} \
            --repository-format=docker \
            --location=${{ env.REGION }} \
            --description="Docker repository for ${{ env.SERVICE_NAME }}" \
            --quiet || echo "Repository already exists"

      - name: Build and push Docker image
        run: |
          echo "🔨 Building Docker image..."
          echo "📦 Image tag: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }}"
          echo "🏗️  Project ID: ${{ env.PROJECT_ID }}"
          echo "📝 Service Name: ${{ env.SERVICE_NAME }}"
          
          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }} .
          
          echo "🚀 Pushing Docker image..."
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }}

      - name: Deploy to Cloud Run
        run: |
          echo "🚀 Deploying to Cloud Run..."
          echo "📦 Image: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }}"
          echo "📍 Region: ${{ env.REGION }}"
          echo "🔧 Service: ${{ env.SERVICE_NAME }}"
          
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
            --platform managed \
            --region ${{ env.REGION }} \
            --allow-unauthenticated \
            --port 8080 \
            --memory 512Mi \
            --cpu 1 \
            --max-instances 10 \
            --min-instances 0 \
            --quiet

      - name: Fix IAM Policy
        run: |
          echo "🔐 Fixing IAM policy for public access..."
          gcloud run services add-iam-policy-binding ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --member="allUsers" \
            --role="roles/run.invoker" \
            --quiet

      - name: Get service URL
        id: get-url
        run: |
          echo "🔍 Getting service URL..."
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --platform managed \
            --region ${{ env.REGION }} \
            --format 'value(status.url)')
          echo "service-url=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "🌐 Service URL: $SERVICE_URL"

      - name: Show service URL
        run: |
          echo "🚀 Service deployed successfully!"
          echo "🌐 Service URL: ${{ steps.get-url.outputs.service-url }}"
